module Enumerable

  def my_each
    i = 0
    while i < self.length
      yield(self[i])
      i+=1
    end
    return self
  end

  def my_each_with_index
    self.my_each do |i|
      yield(i, self.index(i))
    end
    return self
  end

  def my_select
    new_array = []
    self.my_each do |i|
      if yield(i)
        new_array.push(i)
      end
    end
    return new_array
  end

  def my_all?
    truth = []
    self.my_each do |i|
      if yield(i)
        truth.push(i)
      end
    end
    if truth == self
      return true
    else
      return false
    end
  end

  def my_any?
    self.my_each do |i|
      if yield(i)
        return true
      end
      i+=1
    end
  end

  def my_none?
    false_array = []
    self.my_each do |i|
      if yield(i)
      else
        false_array.push(i)
      end
    end
    if self.length == false_array.length
      return true
    else
      return false
    end
  end

  def my_count(*obj)
    answer_array = []
    self.my_each do |i|
      if block_given?
        if yield(i)
          answer_array.push(i)
        end
      elsif obj.empty? == false
          answer_array.push(i) if obj.include?(i)
      else
        answer_array.push(i)
      end
    end
    return answer_array.length
  end

  def my_map(&proc)
    answer_array = []
    self.my_each do |i|
      if proc.nil? == false
          answer_array.push(proc.call(i))
      elsif block_given
        answer_array.push(yield(i))
      else
        return enum_for(:my_map)
      end
    end
    return answer_array
  end

  def my_inject(sum=nil)
    if sum == nil
      sum = self[0]
      x = 1
    else
      x = 0
    end
    self[x..self.size].my_each do |i|
      sum = (yield sum, i)
    end
    return sum
  end

end

  def multiply_els(array)
    array.my_inject do |num, sum|
      num * sum
    end
  end